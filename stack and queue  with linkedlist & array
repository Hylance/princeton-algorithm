// Stack:LIFO  Queue:FIFO
//Stack: linked-list implementation in Javapublic class LinkedStatckOfStrings{	private Node first = null;
	private class Node{		String item;		Node next;	}	public boolean isEmpty(){		return first==null;	}	public void push(String item){		Node oldfirst=first;		first=new Node();		first.item=item;		first.next=oldfirst;	}	public String pop(){	String item=first.item;	first=first.next;	return item;	}}//Stack fixed-array implementation in javapublic class FixedCapacityStackOfStrings{	private String[] s;	private int N=0;	public FixedCapacityStackOfStrings(int capacity){	s = new String[capacity];	}	public boolean isEmpty(){	return N==0;	}	public void push(String item){	s[N++]=item;	}	public String pop(){	String item = s[- - N];
	S[N] = null;
	return item;	}}

// Stack: resizing-array implementation
public class ResizingArrayStackOfStrings{	private String[] s;	private int N=0;	public ResizingArrayStackOfStrings(){	s = new String[1];	}	public boolean isEmpty(){	return N==0;	}	public void push(String item){
	if(N==s.length)
		resize(2*s.length);	s[N++]=item;	}
	private void resize(int capacity){
		String[] copy = new String[capacity];
		for(int i=0; i<N; i++)
			copy[i]=s[i];
		s=copy;
	}
	public String pop(){	String = s[- - N];
	S[N] = null;
	if（N>0 && N==s.length/4）
		resize(s.length/2);
	return item;	}}

// Queue: linked-list implementation in java
public class LinkedQueueOfStrings{
	private Node first,last;
	private class Node {
		String item;
		Node next;
	}
	public boolean isEmpty(){
		return first==null;
	}
	public void enqueue(String item){
		Node oldlast=last;
		last = new Node();
		last.item = item;
		last.next = null;
		if (isEmpty())
			first = last;
		else 
			oldlast.next=last;
	}
	public String dequeue(){
		String item = first.item;
		first = first.next;
		if(isEmpty())
			last = null;
		return item;
	}
}
// Queue: Resizing array implementation
public class ResizingArrayQueueOfStrings{
	private String[] q;	private int N=0;
	private int head=0;
	private int tail=0;	public ResizingArrayQueueOfStrings(){	q = new String[1];	}	public boolean isEmpty(){	return N==0;	}	public void enqueue(String item){
	if(N==s.length)
		resize(2*s.length);	q[tail]=item;
	tail=(tail+1) % N;
	N++;	}
	private void resize(int capacity){
		String[] copy = new String[capacity];
		for(int i=head; i<N; i++)
			copy[i]=q[i];
		q=copy;
	}
	public String dequeue(){	String item = q[head];
	q[head] = null;
	head = (head+1) % N;
	N—-;
	if（N>0 && N==q.length/4）
		resize(q.length/2);
	return item;	}}

// Generic stack: linked-list implementation
public class Stack<Item>{	private class Node{		Item item;		Node next;	}	public boolean isEmpty(){		return first==null;	}	public void push(Item item){		Node oldfirst=first;		first=new Node();		first.item=item;		first.next=oldfirst;	}	public Item pop(){	Item item=first.item;	first=first.next;	return item;	}}

// Generic stack: array implementation
public class FixedCapacityStack<Item>{	private Item[] s;	private int N=0;	public FixedCapacityStack(int capacity){	s = (Item[])new Object[capacity];	}	public boolean isEmpty(){	return N==0;	}	public void push(Item item){	s[N++]=item;	}	public Item pop(){	Item item = s[- - N];
	S[N] = null;
	return item;	}}


	
