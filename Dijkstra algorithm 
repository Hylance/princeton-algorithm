// Dijkastra algorithm two-stackvalue: push onto the value stackoperator: push onto the operator stackleft parenthesis: ignoreright parenthesis: pop operator and two values; push the result of applying that operator to those values onto the operand stackpublic class Evaluate {	public static void main (String [] args) {		Stack<String> ops = new Stack <String> ();		Stack<Double> vals = nerw Stack <Double>();		while (!StdIn. isEmpty()){			String s = StdIn.readString ();			if (s.equals(Ò(Ò)) ;			else if (s.equals(Ò+Ó)) 				ops.push (s);			else if (s.equals(Ò*Ó)) 				ops.push (s);			else if (s.equals(Ò)Ó)) {				String op = ops.pop();				if (op.equals(Ò+Ó))					vals.push(vals.pop() + vals.pop ());				else if (op.equals(Ò*Ó)) 					vals.push(vals.pop() * vals.pop());			}			else vals.push(Double.parseDouble(s));		}		StdOut.println(vals.pop));	}} 